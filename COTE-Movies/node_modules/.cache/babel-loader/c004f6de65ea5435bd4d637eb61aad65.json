{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eddim\\\\Desktop\\\\Uni 2021\\\\Systems\\\\react-movies - Copy\\\\src\\\\components\\\\Store.js\",\n    _s = $RefreshSig$();\n\nimport { useThemeProps } from '@mui/system';\nimport React from 'react';\nimport io from 'socket.io-client';\n/*\r\n    {\r\n        from: 'user'\r\n        msg: 'hi'\r\n        topic: 'imdb_ID'\r\n    }\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CTX = /*#__PURE__*/React.createContext();\nconst initState = {\n  general: [{\n    from: 'Ed',\n    msg: 'Hello'\n  }, {\n    from: 'Dave',\n    msg: 'Hello'\n  }, {\n    from: 'Smith',\n    msg: 'Hello'\n  }],\n  topic2: [{\n    from: 'Ed',\n    msg: 'Hello'\n  }, {\n    from: 'Dave',\n    msg: 'Hello'\n  }, {\n    from: 'Smith',\n    msg: 'Hello'\n  }]\n};\n\nfunction reducer(state, action) {\n  const {\n    from,\n    msg,\n    topic\n  } = action.payload;\n\n  switch (action.type) {\n    case 'RECIVE_MESSAGE':\n      return { ...state,\n        [topic]: [...state[topic], {\n          from,\n          msg\n        }]\n      };\n\n    default:\n      return state;\n  }\n}\n\nlet socket;\n\nfunction sendChatAction(value) {\n  socket.emit('chat message', value);\n}\n\nexport default function Store(props) {\n  _s();\n\n  const [allChats, dispatch] = React.useReducer(reducer, initState);\n\n  if (!socket) {\n    socket = io(':3000');\n    socket.on('chat message', function (msg) {\n      dispatch({\n        typepayload: msg\n      });\n    });\n  }\n\n  const user = 'Ed' + Math.random(100).toFixed(2);\n  return /*#__PURE__*/_jsxDEV(CTX.Provider, {\n    value: {\n      allChats,\n      sendChatAction,\n      user\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Store, \"vrFk29yLryXB0VLT2D60PCem8hY=\");\n\n_c = Store;\n\nvar _c;\n\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"sources":["C:/Users/eddim/Desktop/Uni 2021/Systems/react-movies - Copy/src/components/Store.js"],"names":["useThemeProps","React","io","CTX","createContext","initState","general","from","msg","topic2","reducer","state","action","topic","payload","type","socket","sendChatAction","value","emit","Store","props","allChats","dispatch","useReducer","on","typepayload","user","Math","random","toFixed","children"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,aAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,MAAMC,GAAG,gBAAGF,KAAK,CAACG,aAAN,EAAZ;AAEP,MAAMC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAC,CACJ;AAACC,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,GAAG,EAAE;AAAlB,GADI,EAEJ;AAACD,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,GAAG,EAAE;AAApB,GAFI,EAGJ;AAACD,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GAHI,CADM;AAOdC,EAAAA,MAAM,EAAC,CACH;AAACF,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,GAAG,EAAE;AAAlB,GADG,EAEH;AAACD,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,GAAG,EAAE;AAApB,GAFG,EAGH;AAACD,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GAHG;AAPO,CAAlB;;AAcA,SAASE,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAA+B;AAC3B,QAAM;AAACL,IAAAA,IAAD;AAAOC,IAAAA,GAAP;AAAYK,IAAAA;AAAZ,MAAqBD,MAAM,CAACE,OAAlC;;AAEA,UAAQF,MAAM,CAACG,IAAf;AACI,SAAK,gBAAL;AACI,aAAM,EACF,GAAGJ,KADD;AAEF,SAACE,KAAD,GAAS,CACL,GAAGF,KAAK,CAACE,KAAD,CADH,EAEL;AACIN,UAAAA,IADJ;AAEIC,UAAAA;AAFJ,SAFK;AAFP,OAAN;;AAUJ;AACI,aAAOG,KAAP;AAbR;AAeH;;AAID,IAAIK,MAAJ;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAC1BF,EAAAA,MAAM,CAACG,IAAP,CAAY,cAAZ,EAA4BD,KAA5B;AACH;;AAED,eAAe,SAASE,KAAT,CAAeC,KAAf,EAAqB;AAAA;;AAEhC,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBtB,KAAK,CAACuB,UAAN,CAAiBd,OAAjB,EAA0BL,SAA1B,CAA7B;;AAEA,MAAI,CAACW,MAAL,EAAY;AACRA,IAAAA,MAAM,GAAGd,EAAE,CAAC,OAAD,CAAX;AACAc,IAAAA,MAAM,CAACS,EAAP,CAAU,cAAV,EAA0B,UAASjB,GAAT,EAAa;AACnCe,MAAAA,QAAQ,CAAC;AAACG,QAAAA,WAAW,EAAElB;AAAd,OAAD,CAAR;AACH,KAFD;AAGH;;AAED,QAAMmB,IAAI,GAAG,OAAOC,IAAI,CAACC,MAAL,CAAY,GAAZ,EAAiBC,OAAjB,CAAyB,CAAzB,CAApB;AAIA,sBACI,QAAC,GAAD,CAAK,QAAL;AAAc,IAAA,KAAK,EAAE;AAACR,MAAAA,QAAD;AAAWL,MAAAA,cAAX;AAA2BU,MAAAA;AAA3B,KAArB;AAAA,cACKN,KAAK,CAACU;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GApBuBX,K;;KAAAA,K","sourcesContent":["import { useThemeProps } from '@mui/system';\r\nimport React from 'react';\r\nimport io from 'socket.io-client'\r\n\r\n/*\r\n    {\r\n        from: 'user'\r\n        msg: 'hi'\r\n        topic: 'imdb_ID'\r\n    }\r\n*/\r\n\r\n\r\nexport const CTX = React.createContext();\r\n\r\nconst initState = {\r\n    general:[\r\n        {from: 'Ed', msg: 'Hello'},\r\n        {from: 'Dave', msg: 'Hello'},\r\n        {from: 'Smith', msg: 'Hello'},\r\n    ],\r\n\r\n    topic2:[\r\n        {from: 'Ed', msg: 'Hello'},\r\n        {from: 'Dave', msg: 'Hello'},\r\n        {from: 'Smith', msg: 'Hello'},\r\n    ]\r\n}\r\n\r\nfunction reducer(state, action){\r\n    const {from, msg, topic} = action.payload;\r\n    \r\n    switch (action.type){\r\n        case 'RECIVE_MESSAGE':\r\n            return{\r\n                ...state,\r\n                [topic]: [\r\n                    ...state[topic],\r\n                    {\r\n                        from,\r\n                        msg\r\n                    }\r\n                ]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nlet socket;\r\n\r\nfunction sendChatAction(value){\r\n    socket.emit('chat message', value);\r\n}\r\n\r\nexport default function Store(props){\r\n    \r\n    const [allChats, dispatch] = React.useReducer(reducer, initState);\r\n\r\n    if (!socket){\r\n        socket = io(':3000');\r\n        socket.on('chat message', function(msg){\r\n            dispatch({typepayload: msg});\r\n        })\r\n    }\r\n\r\n    const user = 'Ed' + Math.random(100).toFixed(2);\r\n\r\n   \r\n    \r\n    return(\r\n        <CTX.Provider value={{allChats, sendChatAction, user}}>\r\n            {props.children}\r\n        </CTX.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}