{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eddim\\\\Desktop\\\\Uni 2021\\\\Systems\\\\react-movies\\\\COTE-Movies\\\\src\\\\components\\\\Store.js\",\n    _s = $RefreshSig$();\n\nimport { useThemeProps } from '@mui/system';\nimport React from 'react';\nimport io from 'socket.io-client';\n/*\r\n    {\r\n        from: 'user'\r\n        msg: 'hi'\r\n        topic: 'imdb_ID'\r\n    }\r\n*/\n// export const CTX = React.createContext();\n// const initState = {\n//     general:[\n//         {from: 'Ed', msg: 'Hello'},\n//         {from: 'Dave', msg: 'Hello'},\n//         {from: 'Smith', msg: 'Hello'},\n//     ]   \n// }\n// function reducer(state, action){\n//     const {from, msg, topic} = action.payload;\n//     switch (action.type){\n//         case 'RECEIVE_MESSAGE':\n//             return{\n//                 ...state,\n//                 [topic]: [\n//                     ...state[topic],\n//                     {\n//                         from,\n//                         msg\n//                     }\n//                 ]\n//             }\n//         default:\n//             return state\n//     }\n// }\n// let socket;\n// function sendChatAction(value){\n//     socket.emit('chat message', value);\n// }\n// export default function Store(props){\n//     const {user, room} = props\n//     const [allChats, dispatch] = React.useReducer(reducer, initState);\n//     console.log(user);\n//     if (!socket){\n//         socket = io(':3001');\n//         socket.on('chat message', function(msg){\n//             console.log({msg})\n//             dispatch({type:'RECEIVE_MESSAGE', payload: msg});\n//         })\n//     }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat(_ref) {\n  _s();\n\n  let {\n    socket,\n    username,\n    room\n  } = _ref;\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        auther: username,\n        message: currentMessage,\n        time: new Date(Date.now).getHours() + \":\" + new Date(Date.now).getMinutes()\n      };\n      await socket.emit(\"send_message\", messageData);\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    // <CTX.Provider value={{allChats, sendChatAction, user}}>\n    //     {props.children}\n    // </CTX.Provider>\n    _jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(Chat, \"fDkx3BIBKR9cKtC6DnMvHgOXiCo=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/eddim/Desktop/Uni 2021/Systems/react-movies/COTE-Movies/src/components/Store.js"],"names":["useThemeProps","React","io","Chat","socket","username","room","currentMessage","setCurrentMessage","useState","sendMessage","messageData","auther","message","time","Date","now","getHours","getMinutes","emit"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,aAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,IAAT,OAAwC;AAAA;;AAAA,MAA1B;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,GAA0B;AAChC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCC,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMC,WAAW,GAAG,YAAY;AAC5B,QAAIH,cAAc,KAAK,EAAvB,EAA0B;AACtB,YAAMI,WAAW,GAAG;AAChBL,QAAAA,IAAI,EAAEA,IADU;AAEhBM,QAAAA,MAAM,EAAEP,QAFQ;AAGhBQ,QAAAA,OAAO,EAAEN,cAHO;AAIhBO,QAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAd,EAAmBC,QAAnB,KAAgC,GAAhC,GAAsC,IAAIF,IAAJ,CAASA,IAAI,CAACC,GAAd,EAAmBE,UAAnB;AAJ5B,OAApB;AAOA,YAAMd,MAAM,CAACe,IAAP,CAAY,cAAZ,EAA4BR,WAA5B,CAAN;AACH;AACJ,GAXD;;AAkBJ;AAAA;AACI;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAMH;;GA3BQR,I;;KAAAA,I","sourcesContent":["import { useThemeProps } from '@mui/system';\r\nimport React from 'react';\r\nimport io from 'socket.io-client'\r\n\r\n\r\n/*\r\n    {\r\n        from: 'user'\r\n        msg: 'hi'\r\n        topic: 'imdb_ID'\r\n    }\r\n*/\r\n\r\n\r\n// export const CTX = React.createContext();\r\n\r\n\r\n// const initState = {\r\n//     general:[\r\n//         {from: 'Ed', msg: 'Hello'},\r\n//         {from: 'Dave', msg: 'Hello'},\r\n//         {from: 'Smith', msg: 'Hello'},\r\n//     ]   \r\n// }\r\n\r\n// function reducer(state, action){\r\n//     const {from, msg, topic} = action.payload;\r\n    \r\n//     switch (action.type){\r\n//         case 'RECEIVE_MESSAGE':\r\n            \r\n//             return{\r\n//                 ...state,\r\n//                 [topic]: [\r\n//                     ...state[topic],\r\n//                     {\r\n//                         from,\r\n//                         msg\r\n//                     }\r\n//                 ]\r\n//             }\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// let socket;\r\n\r\n// function sendChatAction(value){\r\n//     socket.emit('chat message', value);\r\n// }\r\n\r\n\r\n\r\n// export default function Store(props){\r\n//     const {user, room} = props\r\n//     const [allChats, dispatch] = React.useReducer(reducer, initState);\r\n//     console.log(user);\r\n//     if (!socket){\r\n//         socket = io(':3001');\r\n//         socket.on('chat message', function(msg){\r\n//             console.log({msg})\r\n//             dispatch({type:'RECEIVE_MESSAGE', payload: msg});\r\n//         })\r\n//     }\r\nfunction Chat({ socket, username, room}){\r\n        const [currentMessage, setCurrentMessage] = useState(\"\");\r\n\r\n        const sendMessage = async () => {\r\n            if (currentMessage !== \"\"){\r\n                const messageData = {\r\n                    room: room,\r\n                    auther: username,\r\n                    message: currentMessage,\r\n                    time: new Date(Date.now).getHours() + \":\" + new Date(Date.now).getMinutes()\r\n                };\r\n\r\n                await socket.emit(\"send_message\", messageData);\r\n            }\r\n        }\r\n    \r\n\r\n    \r\n\r\n   \r\n    \r\n    return(\r\n        // <CTX.Provider value={{allChats, sendChatAction, user}}>\r\n        //     {props.children}\r\n        // </CTX.Provider>\r\n        <div></div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}