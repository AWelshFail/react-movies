[{"C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\index.js":"1","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\App.js":"2","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\reportWebVitals.js":"3","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\MovieComponent.js":"4","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\MovieInfoComponent.js":"5","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\YoutubeEmbed.js":"6","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\Dashboard.js":"7","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\Store.js":"8","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\ChatApp.js":"9","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\Chat.js":"10"},{"size":167,"mtime":1648899658218,"results":"11","hashOfConfig":"12"},{"size":5072,"mtime":1649442160066,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1648890806124,"results":"14","hashOfConfig":"12"},{"size":1508,"mtime":1649435838937,"results":"15","hashOfConfig":"12"},{"size":5545,"mtime":1649441936435,"results":"16","hashOfConfig":"12"},{"size":562,"mtime":1648899583399,"results":"17","hashOfConfig":"12"},{"size":4546,"mtime":1649268500240,"results":"18","hashOfConfig":"12"},{"size":2158,"mtime":1649265410575,"results":"19","hashOfConfig":"12"},{"size":1673,"mtime":1649443061508,"results":"20","hashOfConfig":"12"},{"size":4414,"mtime":1649442942655,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"q7wdmk",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"25"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\index.js",[],[],["59","60"],"C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\App.js",["61"],[],"import { useState } from 'react';\r\nimport styled from 'styled-components'\r\nimport MovieComponent from \"./components/MovieComponent\";\r\nimport axios from 'axios';\r\nimport MovieInfoComponent from \"./components/MovieInfoComponent\";\r\n\r\n\r\n\r\n\r\n//export const API_KEY = \"k_4gvizmjv\";\r\n//export const API_KEY = \"k_6npoyq2n\";\r\n//export const API_KEY = \"k_9uxy48gg\";\r\n//export const API_KEY = \"k_d5nc6sfs\";\r\n//export const API_KEY = \"k_atxl86be\";\r\n//export const API_KEY = \"k_e1mhcbum\";\r\nexport const API_KEY = \"k_2xigzzuc\";\r\n\r\nvar first_count = true;\r\nvar search_header = \"\";\r\n\r\nconst Container = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\njustify-content: space-between;\r\nalign-items: center;\r\nbackground-color: black;\r\ncolor: white;\r\npadding: 10px;\r\nfont-size: 25px;\r\nfont-weight: bold;\r\nbox-shadow: 0 3px 6px 0 #555;\r\n`;\r\n\r\nconst AppName = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\nalign-items: center;\r\n`;\r\n\r\nconst AppLogo = styled.img`\r\nwidth: 48px;\r\nheight: 48px;\r\nmargin: 15px;\r\n`;\r\n\r\nconst SearchBox = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\npadding: 10px 10px;\r\nbackground-color: #fff;\r\nborder-radius: 6px;\r\nmargin-left: 20px;\r\nmargin-right: 15px;\r\nwidth: 50%;\r\nheight: 25px;\r\nalign-items: center;\r\n`;\r\n\r\nconst SearchIcon = styled.img`\r\n width: 32px;\r\n height: 30px;\r\n opacity: 40%;\r\n cursor: pointer;\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\ncolor: black;\r\nfont-size: 20px;\r\nfont-weight: bolder;\r\nwidth: 80%;\r\nborder: none;\r\noutline: none;\r\nmargin-left: 12px;\r\ntext-transform: capitalize;\r\n`;\r\n\r\nconst MovieListContainer = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\nflex-wrap: wrap;\r\npadding: 30px;\r\njustify-content: space-evenly;\r\ngap: 24px;\r\n`;\r\n\r\nconst SearchHeader = styled.div`\r\nmargin-left: 20px;\r\ntext-transform: capitalize;\r\n`;\r\n\r\nfunction App() {\r\n  const [searchQuery, updateSearchQuery] = useState();\r\n  const [timeoutId, updateTimeoutId] = useState();\r\n  const [movieList, updateMovieList] = useState([]);\r\n  const [selectedMovie, onMovieSelect] = useState();\r\n  \r\n  \r\n  \r\n  // API call\r\n  \r\n  const fetchData = async (searchString) => {\r\n    if (searchString == null || searchString == \"\") {\r\n      const response = await axios.get(\r\n          `https://imdb-api.com/en/API/MostPopularMovies/${API_KEY}`\r\n      )\r\n      search_header = \"Most Popular Movies\";\r\n      updateMovieList(response.data.items)\r\n\r\n    } else {\r\n      const response = await axios.get(\r\n          `https://imdb-api.com/API/AdvancedSearch/${API_KEY}/?title=${searchString}`\r\n      )\r\n      search_header = searchString;\r\n      updateMovieList(response.data.results)\r\n    }\r\n  };\r\n\r\n  // search query with timeout of .5 seconds so it doesn't\r\n  // do an api call for every letter, but waits for\r\n  // the user to finish typing.\r\n\r\n  const onTextChange = (event) => {\r\n    clearTimeout(timeoutId);\r\n    updateSearchQuery(event.target.value);\r\n    const timeout = setTimeout(() => fetchData(event.target.value), 500);\r\n    updateTimeoutId(timeout);\r\n  };\r\n  const onTextLoad = (event) => {\r\n    if (first_count) {\r\n        onTextChange(event)\r\n        first_count = false;\r\n    }\r\n};\r\n  \r\n\r\n  return (\r\n\r\n    <Container onLoad={onTextLoad}>\r\n    <Header>\r\n        <AppName>\r\n            <AppLogo src=\"/VideocutLOGO.png\" />\r\n            COTE-Movies\r\n        </AppName>\r\n        <SearchBox>\r\n            <SearchIcon src=\"/icons8-search.png\" />\r\n            <SearchInput placeholder=\"Search here...\"\r\n                value={searchQuery}\r\n                onChange={onTextChange} />\r\n        </SearchBox>\r\n    </Header>\r\n    <SearchHeader>\r\n        <h2 class=\"results\">Showing Results For: {search_header}</h2>\r\n    </SearchHeader>\r\n    {selectedMovie && (\r\n        <MovieInfoComponent\r\n            selectedMovie={selectedMovie}\r\n            onMovieSelect={onMovieSelect}\r\n        />)}\r\n\r\n    <MovieListContainer>\r\n\r\n           {/* Check if the movieList which is a variable obj,\r\n             marked by a \"?\" mark, has a length (Also marked by ? mark),\r\n             i.e. If there is no search results, the movieList will be 0, as will the length of it**\r\n             Then map the movieList via the map method, and return the MovieComponent.\r\n             If no movie is found, return the placeholder \"No search results found!\"  - else marked via :\r\n\r\n             movieList is a useState of array type.\r\n             movieList is mapped to movie obj and index,\r\n             Whereby movieList array is added to the MovieComponent class,\r\n             with it's key mapped to the returned index of an obj, and it's obj\r\n             value mapped to movie.*/}\r\n\r\n        {movieList?.length\r\n            ? movieList.map((movie, index) => (\r\n                <MovieComponent\r\n                    key={index}\r\n                    movie={movie}\r\n                    onMovieSelect={onMovieSelect}\r\n                />))\r\n            : \"No search results were generated, please enter a new search.\"}\r\n\r\n    </MovieListContainer>\r\n</Container>\r\n      \r\n  );\r\n\r\n  \r\n\r\n}\r\n\r\nexport default App;","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\reportWebVitals.js",[],[],"C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\MovieComponent.js",["62"],[],"import styled from \"styled-components\";\r\nimport ChatApp from \"./ChatApp\"\r\n\r\nconst MovieContainer = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\npadding: 10px;\r\nwidth: 280px;\r\nbox-shadow: 0 3px 10px 0 #aaa;\r\ncursor: pointer;\r\nbackground: #fff;\r\n`;\r\n\r\nconst CoverImage = styled.img`\r\nheight: 362px;\r\nobject-fit: cover;\r\n`;\r\n\r\nconst MovieName = styled.span`\r\nfont-size: 18px;\r\nfont-weight: 600;\r\ncolor: black;\r\nmargin: 15px 0;\r\nwhite-space: nowrap;\r\ntext-overflow: ellipsis;\r\noverflow: hidden;\r\n`;\r\n\r\nconst MovieInfo = styled.span`\r\nfont-size: 16px;\r\nfont-weight: 500;\r\ncolor: black;\r\ntext-transform: capitalize;\r\n`;\r\n\r\nconst InfoColumn = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\njustify-content: space-between;\r\n`;\r\n\r\n\r\n\r\n\r\nconst MovieComponent = (props) => {\r\n\r\n    // Assign the API content to the movie prop which\r\n    // currently contains the type and index of search results!\r\n   // const { Title, Year, imdbID, Type, Poster } = props.movie;\r\n\r\n   //<MovieInfo>Type: {type}</MovieInfo>\r\n\r\n    // removed id from const and onMoveSelect parse in props method!\r\n\r\n    const { id, title, description, year, image } = props.movie;\r\n    \r\n    return <MovieContainer onClick={ () => props.onMovieSelect(id) }>\r\n        <CoverImage src={image} />\r\n            <MovieName>{title}</MovieName>\r\n                <InfoColumn>\r\n            <MovieInfo>Year: {description} {year}</MovieInfo>\r\n            \r\n            \r\n        </InfoColumn>\r\n    </MovieContainer>\r\n}\r\n\r\nexport default MovieComponent","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\MovieInfoComponent.js",["63","64","65"],[],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { API_KEY } from \"../App.js\";\r\nimport YoutubeEmbed from \"./YoutubeEmbed\";\r\nimport Dashboard from \"./Dashboard\"\r\nimport ChatApp from \"./ChatApp\"\r\nimport Store from \"./Store\"\r\n\r\n\r\nconst Container = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\npadding: 20px 30px;\r\njustify-content: left;\r\nborder-bottom: 1px solid #969696;\r\n`;\r\n\r\nconst VideoContainer = styled.div`\r\ndisplay: flex;\r\npadding: 20px 30px;\r\nflex-direction: column;\r\nheight: 100%;\r\nwidth: 50%;\r\nborder-bottom: 1px solid #969696;\r\n`;\r\n\r\nconst Trailer = styled.div`\r\ndisplay: flex;\r\nflex-direction: right;\r\nwidth: 100%;\r\n\r\n`;\r\n\r\nconst DashboardStyle = styled.div`\r\nwidth: 50%;\r\npadding: 10px 30px;\r\nbackground: #708090;\r\njustify-content: center;\r\n`;\r\n\r\nconst LiveChat = styled.div`\r\nwidth: 50%;\r\npadding: 10px 30px;\r\nbackground: #708090;\r\njustify-content: center;\r\n`;\r\n\r\n\r\nconst CoverImage = styled.img`\r\ndisplay: flex;\r\nobject-fit: fill;\r\nheight: 452px;\r\nmargin-left: 10px;\r\nalign-items: center;\r\n`;\r\n\r\nconst InfoColumn = styled.div`\r\ndisplay: flex;\r\nwidth: 100%;\r\nflex-direction: column;\r\nmargin: 20px;\r\n`;\r\n\r\nconst MovieName = styled.span`\r\nfont-size: 22px;\r\nfont-weight: 600;\r\ncolor: black;\r\nmargin: 15px 0;\r\nwhite-space: nowrap;\r\ntext-transform: capitalize;\r\ntext-overflow: ellipsis;\r\noverflow: hidden;\r\n& span {\r\n    opacity: 0.8;\r\n}\r\n`;\r\n\r\nconst MovieInfo = styled.span`\r\n\r\nfont-size: 16px;\r\nfont-weight: 500;\r\ncolor: black;\r\noverflow: hidden;\r\ntext-transform: capitalize;\r\ntext-overflow: ellipsis;\r\n& span {\r\n    opacity: 0.5;\r\n}\r\n`;\r\n\r\nconst Close = styled.span`\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: white;\r\n  background: black;\r\n  height: fit-content;\r\n  padding: 8px;\r\n  border-radius: 0%;\r\n  cursor: pointer;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst Desc = styled.div`\r\n text-transform: none;\r\n`;\r\n\r\n\r\n\r\nconst MovieInfoComponent = (props) => {\r\n\r\n    // NOTE: The API key is ?i instead of ?s as we are searching for a particular imdbID rather than movie Title.\r\n    // As shown in API documentation.\r\n\r\n    const { selectedMovie } = props;\r\n    // eslint-disable-next-line no-unused-vars\r\n    \r\n    const [movieInfo, setMovieInfo] = useState();\r\n\r\n    const [trailerInfo, setTrailerInfo] = useState();\r\n    \r\n    // As selectedMovie is receiving the ImdbID, it needs to be a prop.\r\n    //\r\n    // Get the API via selectedMovie prop's imdbID and key, then\r\n    // executive the response, and parse that response.data to setMovieInfo.\r\n    useEffect(() => {\r\n\r\n      const fetchMovieInfo = async () => {\r\n\r\n        // Get Request\r\n      await axios.get(`https://imdb-api.com/en/API/Title/${API_KEY}/${selectedMovie}`,).then((response) =>\r\n      setMovieInfo(response.data));\r\n      \r\n      }; fetchMovieInfo() }, [selectedMovie]);\r\n\r\n      useEffect(() => {\r\n\r\n        const fetchTrailerInfo = async () => {\r\n        \r\n          // Get Request\r\n        await axios.get(`https://imdb-api.com/en/API/YouTubeTrailer/${API_KEY}/${selectedMovie}`,).then((response) =>\r\n        setTrailerInfo(response.data.videoId));\r\n        \r\n        }; fetchTrailerInfo()}, );\r\n\r\n      // useEffect(() => {\r\n      //   const fetchChatApp = async () => {\r\n      //     ChatApp();\r\n      //   }; ChatApp()}, );\r\n        \r\n    return (\r\n      \r\n            <><Container>\r\n        {movieInfo ? (\r\n          <>            \r\n            \r\n            <CoverImage src={movieInfo?.image} alt={movieInfo?.title} />\r\n            <InfoColumn>\r\n            <MovieName><span>{movieInfo?.title}</span></MovieName>\r\n              <MovieInfo>Type: <span>{movieInfo?.type}</span></MovieInfo>\r\n              <MovieInfo>Director: <span>{movieInfo?.directors}</span></MovieInfo>\r\n              <MovieInfo>IMDB Rating: <span>{movieInfo.imDbRating}</span></MovieInfo>\r\n              <MovieInfo>Year: <span>{movieInfo.year}</span></MovieInfo>\r\n              <MovieInfo>Released: <span>{movieInfo.releaseDate}</span></MovieInfo>\r\n              <MovieInfo>Languages: <span>{movieInfo.languages}</span></MovieInfo>\r\n              <MovieInfo>Metascore: <span>{movieInfo.metacriticRating}</span></MovieInfo>\r\n              <MovieInfo>Rated: <span>{movieInfo?.contentRating}</span></MovieInfo>\r\n              <MovieInfo>Runtime: <span>{movieInfo?.runtimeStr}</span></MovieInfo>\r\n              <MovieInfo>Actors: <span>{movieInfo?.stars}</span></MovieInfo>\r\n              <MovieInfo>Awards: <Desc><span>{movieInfo?.awards}</span></Desc></MovieInfo>\r\n              <MovieInfo>Genre: <span>{movieInfo?.genres}</span></MovieInfo>\r\n              <MovieInfo>Description: <Desc><span>{movieInfo?.plot}</span></Desc></MovieInfo>\r\n            </InfoColumn>\r\n            \r\n            <Close onClick={() => props.onMovieSelect()}>X</Close>\r\n          </>\r\n        ) : (\r\n          \"Loading...\"\r\n        )}\r\n      </Container><Trailer>\r\n          <VideoContainer>\r\n            <div className=\"App\">\r\n              <MovieName>{movieInfo?.title} Trailer</MovieName>\r\n              <br></br>\r\n              <br></br>\r\n              <YoutubeEmbed embedId={trailerInfo} />\r\n\r\n            </div>\r\n          </VideoContainer>\r\n\r\n          <LiveChat>\r\n\r\n            <ChatApp selectMovie={selectedMovie}/>\r\n          \r\n          \r\n          \r\n            \r\n            <div className=\"App\">\r\n              \r\n              \r\n              <br></br>\r\n              <br></br>\r\n            </div>\r\n          </LiveChat>\r\n        </Trailer></>\r\n        \r\n        )\r\n          }\r\n\r\nexport default MovieInfoComponent","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\YoutubeEmbed.js",[],[],"C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\Dashboard.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],[],"import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/Styles';\r\nimport styled from \"styled-components\";\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { borderRight } from '@mui/system';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Chip from '@mui/material/Chip';\r\nimport TextField from '@mui/material/TextField';\r\nimport { CTX } from './Store';\r\nimport io from \"socket.io-client\";\r\nimport Store from \"./Store\"\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        margin: '50px',\r\n        padding: theme.spacing(3, 2),\r\n    },\r\n    flex: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    topicsWindow: {\r\n        width: '30%',\r\n        height: '300px',\r\n        borderRight: '1px solid grey'\r\n    },\r\n    chatWindow: {\r\n        width: '70%',\r\n        height: '300px',\r\n        padding: '20px'\r\n    },\r\n    chatBox: {\r\n        width: '85%'\r\n    },\r\n    nicknameBox: {\r\n        width: '30%'\r\n    },\r\n    button: {\r\n        width: '15%'\r\n        \r\n    }\r\n}));\r\n\r\nconst Dashboard = (props) => {\r\n    const classes = useStyles();\r\n    const { selectMovie } = props;\r\n    console.log(selectMovie)\r\n    //CTX store\r\n    const {allChats, sendChatAction, user} = React.useContext(CTX);\r\n    \r\n    //console.log({allChats});\r\n\r\n    const topics = Object.keys(allChats);\r\n\r\n    //Local State\r\n    const [textValue, changeTextValue] = React.useState('');\r\n    const [username, setUsername] = React.useState('');\r\n    const [room, setRoom] = React.useState('');\r\n    const [activeTopic, changeActiveTopic] = React.useState(topics[0]);\r\n\r\n\r\n    useEffect(() => {\r\n        setRoom(selectMovie)\r\n    }, [selectMovie])\r\n\r\n    const joinRoom = () => {\r\n        if(username !== \"\" && room !== \"\"){\r\n            socket = io(':3001');\r\n            socket.emit(\"join_room\", room);\r\n        }\r\n    }\r\n\r\n    let socket;\r\n\r\n    return(\r\n        <Card sx={{ minWidth: 275,  minHeight: 475}}>\r\n      <CardContent>\r\n        <Typography variant = \"h2\" sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n          Chat App\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"div\">\r\n          {activeTopic}\r\n        </Typography>\r\n        \r\n        <div className={classes.flex}>\r\n            {/* <div className={classes.topicsWindow}>\r\n                <List>\r\n                    {\r\n                        topics.map(topic => (\r\n                            <ListItem onClick={e => changeActiveTopic(e.target.innerText)} key={topic} button>\r\n                                <ListItemText primary={topic} />\r\n                            </ListItem>\r\n                        ))\r\n                    }\r\n                    \r\n                </List>\r\n            </div> */}\r\n            <div className={classes.flex}>\r\n                <div className={classes.nicknameBox}>\r\n                    <input type=\"test\" placeholder=\"Nickname\" \r\n                    onChange={(event) => {\r\n                        setUsername(event.target.value);                     \r\n                    }}/>\r\n                    \r\n                    <button onClick={joinRoom}>Join</button>\r\n                    <chat socket={socket} username={username} room={room}/>\r\n                </div>\r\n            </div>\r\n            <div className={classes.chatWindow}>\r\n            \r\n                    {\r\n                        \r\n                    }\r\n                    \r\n                \r\n            </div>\r\n        </div>\r\n        <div className={classes.flex}>\r\n            <TextField \r\n            label=\"Send to chat\" \r\n            variant=\"outlined\"\r\n            className={classes.chatBox}\r\n            value={textValue}\r\n            \r\n            />\r\n            <Button \r\n                variant='contained' \r\n                color=\"primary\" \r\n                className={classes.button}\r\n                \r\n            >\r\n                Send\r\n            </Button>\r\n        </div>\r\n      </CardContent>\r\n      */\r\n    </Card>\r\n    )\r\n    \r\n}\r\nexport default Dashboard;","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\Store.js",["82","83"],[],"import { useThemeProps } from '@mui/system';\r\nimport React from 'react';\r\nimport io from 'socket.io-client'\r\nimport Dashboard from \"./Dashboard\"\r\n\r\n\r\n/*\r\n    {\r\n        from: 'user'\r\n        msg: 'hi'\r\n        topic: 'imdb_ID'\r\n    }\r\n*/\r\n\r\n\r\nexport const CTX = React.createContext();\r\n\r\n\r\nconst initState = {\r\n    general:[\r\n        {from: 'Ed', msg: 'Hello'},\r\n        {from: 'Dave', msg: 'Hello'},\r\n        {from: 'Smith', msg: 'Hello'},\r\n    ]   \r\n}\r\n\r\nfunction reducer(state, action){\r\n    const {from, msg, topic} = action.payload;\r\n    \r\n    switch (action.type){\r\n        case 'RECEIVE_MESSAGE':\r\n            \r\n            return{\r\n                ...state,\r\n                [topic]: [\r\n                    ...state[topic],\r\n                    {\r\n                        from,\r\n                        msg\r\n                    }\r\n                ]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nlet socket;\r\n\r\nfunction sendChatAction(value){\r\n    socket.emit('chat message', value);\r\n}\r\n\r\nconst user = \"Ed\";\r\n\r\n\r\nexport default function Store(props){\r\n    \r\n    const [allChats, dispatch] = React.useReducer(reducer, initState);\r\n    \r\n    if (!socket){\r\n        socket = io(':3001');\r\n        socket.on('chat message', function(msg){\r\n            console.log({msg})\r\n            dispatch({type:'RECEIVE_MESSAGE', payload: msg});\r\n        })\r\n    }\r\n// function Chat({ socket, username, room}){\r\n//         const [currentMessage, setCurrentMessage] = useState(\"\");\r\n\r\n//         const sendMessage = async () => {\r\n//             if (currentMessage !== \"\"){\r\n//                 const messageData = {\r\n//                     room: room,\r\n//                     auther: username,\r\n//                     message: currentMessage,\r\n//                     time: new Date(Date.now).getHours() + \":\" + new Date(Date.now).getMinutes()\r\n//                 };\r\n\r\n//                 await socket.emit(\"send_message\", messageData);\r\n//             }\r\n//         }\r\n    \r\n\r\n    \r\n\r\n   \r\n    \r\n    return(\r\n        <CTX.Provider value={{allChats, sendChatAction, user}}>\r\n            {props.children}\r\n        </CTX.Provider>\r\n    )\r\n}","C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\ChatApp.js",[],[],"C:\\Users\\eddim\\Desktop\\Uni 2021\\Systems\\react-movies\\COTE-Movies\\src\\components\\Chat.js",["84","85","86","87","88","89","90","91","92","93","94","95","96"],[],"import React, { useEffect } from 'react';\r\nimport { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/Styles';\r\nimport styled from \"styled-components\";\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { borderRight } from '@mui/system';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Chip from '@mui/material/Chip';\r\nimport TextField from '@mui/material/TextField';\r\nimport { CTX } from './Store';\r\nimport io from \"socket.io-client\";\r\nimport Store from \"./Store\"\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        margin: '50px',\r\n        padding: theme.spacing(3, 2),\r\n    },\r\n    flex: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    topicsWindow: {\r\n        width: '30%',\r\n        height: '300px',\r\n        borderRight: '1px solid grey'\r\n    },\r\n    chatWindow: {\r\n        width: '70%',\r\n        height: '300px',\r\n        padding: '20px'\r\n    },\r\n    chatBox: {\r\n        width: '85%'\r\n    },\r\n    nicknameBox: {\r\n        width: '30%'\r\n    },\r\n    button: {\r\n        width: '15%'\r\n        \r\n    }\r\n}));\r\n\r\n\r\n\r\nfunction Chat({socket, username, room}){\r\n    const [currentMessage, setCurrentMessage] = useState(\"\");\r\n    const [messageList, setMessageList] = useState([]);\r\n    \r\n\r\n    const sendMessage = async () => {\r\n        if(currentMessage !== \"\")\r\n        {\r\n            const messageData = {\r\n                room: room,\r\n                author: username,\r\n                message: currentMessage,\r\n                time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes()\r\n            };\r\n            //setCurrentRoom(room);\r\n            \r\n            await socket.emit(\"send_message\", messageData);\r\n            setMessageList((list) => [...list, messageData]);\r\n            setCurrentMessage(\"\");\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        // if(currentRoom === room)\r\n        // {\r\n            socket.on(\"receive_message\", (data) =>{\r\n                setMessageList((list) => [...list, data]);\r\n            })\r\n    //     }else{\r\n    //         //socket.emit(\"room_disconnect\");\r\n    //         socket.emit(\"join_room\", room);\r\n    //         setMessageList([]);\r\n    //     }\r\n     }, [socket])\r\n\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <Card sx={{ minWidth: 275,  minHeight: 475}}>\r\n      <CardContent>\r\n        <Typography variant = \"h2\" sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n          Chat App\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"div\">\r\n          {room}\r\n        </Typography>\r\n        \r\n        <div className={classes.flex}>\r\n        \r\n            <div className={classes.chatWindow}>\r\n            {messageList.map((messageContent) => {\r\n            return(\r\n                <div className={classes.flex} >\r\n                    <Chip label={messageContent.author} />\r\n                    \r\n                    <Typography variant='body1' gutterBottom>{messageContent.message};\r\n                    </Typography>\r\n                </div>\r\n                );\r\n            })}\r\n            \r\n            </div>\r\n            \r\n        </div>\r\n        \r\n        <div className={classes.flex}>\r\n            <TextField \r\n            label=\"Send to chat\" \r\n            variant=\"outlined\"\r\n            className={classes.chatBox}\r\n            value={currentMessage}\r\n            onChange={(event) => {\r\n                setCurrentMessage(event.target.value);\r\n                }}\r\n            \r\n            />\r\n            <Button \r\n                variant='contained' \r\n                color=\"primary\" \r\n                className={classes.button}\r\n                onClick={sendMessage}\r\n                \r\n                \r\n            >\r\n                Send\r\n            </Button>\r\n        </div>\r\n        \r\n        \r\n        </CardContent>\r\n      \r\n    </Card>\r\n    )\r\n}\r\nexport default Chat",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":107,"column":46,"nodeType":"103","messageId":"104","endLine":107,"endColumn":48},{"ruleId":"105","severity":1,"message":"106","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":15},{"ruleId":"105","severity":1,"message":"109","line":6,"column":8,"nodeType":"107","messageId":"108","endLine":6,"endColumn":17},{"ruleId":"105","severity":1,"message":"110","line":8,"column":8,"nodeType":"107","messageId":"108","endLine":8,"endColumn":13},{"ruleId":"105","severity":1,"message":"111","line":35,"column":7,"nodeType":"107","messageId":"108","endLine":35,"endColumn":21},{"ruleId":"105","severity":1,"message":"112","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":14},{"ruleId":"105","severity":1,"message":"113","line":4,"column":8,"nodeType":"107","messageId":"108","endLine":4,"endColumn":11},{"ruleId":"105","severity":1,"message":"114","line":6,"column":8,"nodeType":"107","messageId":"108","endLine":6,"endColumn":19},{"ruleId":"105","severity":1,"message":"115","line":10,"column":10,"nodeType":"107","messageId":"108","endLine":10,"endColumn":21},{"ruleId":"105","severity":1,"message":"116","line":11,"column":8,"nodeType":"107","messageId":"108","endLine":11,"endColumn":21},{"ruleId":"105","severity":1,"message":"117","line":12,"column":8,"nodeType":"107","messageId":"108","endLine":12,"endColumn":12},{"ruleId":"105","severity":1,"message":"118","line":13,"column":8,"nodeType":"107","messageId":"108","endLine":13,"endColumn":16},{"ruleId":"105","severity":1,"message":"119","line":14,"column":8,"nodeType":"107","messageId":"108","endLine":14,"endColumn":22},{"ruleId":"105","severity":1,"message":"120","line":15,"column":8,"nodeType":"107","messageId":"108","endLine":15,"endColumn":20},{"ruleId":"105","severity":1,"message":"121","line":16,"column":8,"nodeType":"107","messageId":"108","endLine":16,"endColumn":20},{"ruleId":"105","severity":1,"message":"122","line":17,"column":8,"nodeType":"107","messageId":"108","endLine":17,"endColumn":12},{"ruleId":"105","severity":1,"message":"110","line":21,"column":8,"nodeType":"107","messageId":"108","endLine":21,"endColumn":13},{"ruleId":"105","severity":1,"message":"123","line":62,"column":22,"nodeType":"107","messageId":"108","endLine":62,"endColumn":36},{"ruleId":"105","severity":1,"message":"124","line":62,"column":38,"nodeType":"107","messageId":"108","endLine":62,"endColumn":42},{"ruleId":"105","severity":1,"message":"125","line":69,"column":23,"nodeType":"107","messageId":"108","endLine":69,"endColumn":38},{"ruleId":"105","severity":1,"message":"126","line":72,"column":25,"nodeType":"107","messageId":"108","endLine":72,"endColumn":42},{"ruleId":"105","severity":1,"message":"127","line":1,"column":10,"nodeType":"107","messageId":"108","endLine":1,"endColumn":23},{"ruleId":"105","severity":1,"message":"109","line":4,"column":8,"nodeType":"107","messageId":"108","endLine":4,"endColumn":17},{"ruleId":"105","severity":1,"message":"112","line":4,"column":8,"nodeType":"107","messageId":"108","endLine":4,"endColumn":14},{"ruleId":"105","severity":1,"message":"113","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":11},{"ruleId":"105","severity":1,"message":"114","line":7,"column":8,"nodeType":"107","messageId":"108","endLine":7,"endColumn":19},{"ruleId":"105","severity":1,"message":"115","line":11,"column":10,"nodeType":"107","messageId":"108","endLine":11,"endColumn":21},{"ruleId":"105","severity":1,"message":"116","line":12,"column":8,"nodeType":"107","messageId":"108","endLine":12,"endColumn":21},{"ruleId":"105","severity":1,"message":"117","line":13,"column":8,"nodeType":"107","messageId":"108","endLine":13,"endColumn":12},{"ruleId":"105","severity":1,"message":"118","line":14,"column":8,"nodeType":"107","messageId":"108","endLine":14,"endColumn":16},{"ruleId":"105","severity":1,"message":"119","line":15,"column":8,"nodeType":"107","messageId":"108","endLine":15,"endColumn":22},{"ruleId":"105","severity":1,"message":"120","line":16,"column":8,"nodeType":"107","messageId":"108","endLine":16,"endColumn":20},{"ruleId":"105","severity":1,"message":"121","line":17,"column":8,"nodeType":"107","messageId":"108","endLine":17,"endColumn":20},{"ruleId":"105","severity":1,"message":"128","line":20,"column":10,"nodeType":"107","messageId":"108","endLine":20,"endColumn":13},{"ruleId":"105","severity":1,"message":"129","line":21,"column":8,"nodeType":"107","messageId":"108","endLine":21,"endColumn":10},{"ruleId":"105","severity":1,"message":"110","line":22,"column":8,"nodeType":"107","messageId":"108","endLine":22,"endColumn":13},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'ChatApp' is defined but never used.","Identifier","unusedVar","'Dashboard' is defined but never used.","'Store' is defined but never used.","'DashboardStyle' is assigned a value but never used.","'styled' is defined but never used.","'Box' is defined but never used.","'CardActions' is defined but never used.","'borderRight' is defined but never used.","'ListSubheader' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemButton' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Chip' is defined but never used.","'sendChatAction' is assigned a value but never used.","'user' is assigned a value but never used.","'changeTextValue' is assigned a value but never used.","'changeActiveTopic' is assigned a value but never used.","'useThemeProps' is defined but never used.","'CTX' is defined but never used.","'io' is defined but never used.","no-global-assign","no-unsafe-negation"]